ch_p <- main_gender$`Pr(>Chisq)`[2]
#Compute type 2 tests with KRmodcomp
main_gender_kr <- KRmodcomp(fit, fit_null)
#store some values for reporting
f_p <- main_gender_kr$test$p.value[1]
#Compute type 2 tests with PBmodcomp
main_gender_pb <- PBmodcomp(fit, fit_null)
kb_p <- main_gender_pb$test[2,3]
##Now c_trial main effect:
#fit full model
fit <- lmer(distance ~ gender + c_trial + (1 + c_trial|pid) , data=df)
#fit null model
fit_null <- lmer(distance ~ gender + (1 + c_trial|pid) , data=df)
#Compute type 2 tests with anova
main_trial <- anova(fit_null, fit) 
ch_df <- main_trial$`Chi Df`[2]
ch_p <- main_trial$`Pr(>Chisq)`[2]
#Compute type 2 tests with KRmodcomp
main_trial_kr <- KRmodcomp(fit, fit_null)
#store some values for reporting
f_p <- main_trial_kr$test$p.value[1]
#Compute type 2 tests with PBmodcomp
main_trial_pb <- PBmodcomp(fit, fit_null)
kb_p <- main_trial_pb$test[2,3]
#fit full model
fit <- lmer(distance ~ gender * c_trial + (1 + c_trial|pid) , data=df)
#fit null model
fit_null <- lmer(distance ~ gender + c_trial + (1 + c_trial|pid) , data=df)
#Compute type 2 tests with anova
interaction_test <- anova(fit_null, fit)
ch_df <- interaction_test$`Chi Df`[2]
ch_p <- interaction_test$`Pr(>Chisq)`[2]
#Compute type 2 tests with KRmodcomp
interaction_kr <- KRmodcomp(fit, fit_null)
#store some values for reporting
f_p <- interaction_kr$test$p.value[1]
#Compute type 2 tests with PBmodcomp
interaction_pb <- PBmodcomp(fit, fit_null)
kb_p <- interaction_pb$test[2,3]
##First the gender main effect:
#fit full model
fit <- lmer(distance ~ gender * c_trial + (1 + c_trial|pid) , data=df)
#fit null model
fit_null <- lmer(distance ~ c_trial + gender:c_trial + (1 + c_trial|pid), data=df)
#Compute type 2 tests
ok <- anova(fit_null, fit)
##Now c_trial main effect:
#fit full model
fit <- lmer(distance ~ gender * c_trial + (1 + c_trial|pid) , data=df)
#fit null model
fit_null <- lmer(distance ~ gender + gender:c_trial + (1 + c_trial|pid) , data=df)
#Compute type 2 tests with anova
not_ok <- anova(fit_null, fit)
##Now the interaction:
#fit full model
fit <- lmer(distance ~ gender * c_trial + (1 + c_trial|pid) , data=df)
#fit null model
fit_null <- lmer(distance ~ gender + c_trial + (1 + c_trial|pid) , data=df)
#Compute type 2 tests with anova
ok2 <- anova(fit_null, fit)
not_ok
type3 <- Anova(fit, type=3, test='F')
type3
cl <- makeCluster(4)
fit_lrt <- mixed(distance ~ gender*c_trial + (1 + c_trial|pid), data=df, type=3, method='LRT', cl=cl)
stopCluster(cl)
fit_lrt$anova_table
cl <- makeCluster(4)
fit_lrt <- mixed(distance ~ gender*c_trial + (1 + c_trial|pid), data=df, type=3, method='LRT', cl=cl)
stopCluster(cl)
fit_lrt$anova_table
knitr::opts_chunk$set(echo = T, warning=FALSE, message=FALSE)
library(knitr)
rmarkdown::render_site
#function for returning p value
report_p <- function(p) {
ifelse(p <= 0.001, paste('<', '.001'),  paste('=', p))
}
#options
options(digits=3)
#contrasts
options(contrasts=c("contr.sum", "contr.poly"))
#load libraries
library(lme4)
library(tidyverse)
library(afex)
library(parallel)
library(emmeans)
#rename df
df <- ChickWeight
#center time
df$c_time <- df$Time-mean(df$Time)
#levels(df$Diet) <- paste('diet', unique(df$Diet), sep='_')
fixed_fit <- lm(weight ~ Time * Diet, data=df)
with(df, table(Diet, Chick))
with(df, table(Time, Chick))
with(df, table(Time, Chick, Diet))
cl <- makeCluster(4)
fit <- lmer(weight ~ Diet*c_time + (1 + c_time|Chick), data=df)
summary(fit)
#densityplot residuals
df$sresid <- resid(fit, scale=T)
qplot(sresid, geom='density', data=df)
##qqplot residuals
library(car)
qqPlot(df$sresid)
#proportions
mean(abs(df$sresid>=2))
mean(abs(df$sresid>=2.5))
mean(abs(df$sresid>=3))
#homoscedasticity
df$fitted <- fitted(fit)
qplot(fitted, sresid, geom=c('point', 'smooth'), se=F, data=df)
ggplot(df, aes(c_time, weight)) +
geom_jitter(alpha=0.5) +
geom_smooth(se=F, color='red') +
geom_smooth(method='lm', se=F)
cl <- makeCluster(4)
fit_m <- mixed(weight ~ Diet*c_time + (1 + c_time|Chick), data=df,type=3, method='PB', args_test = list(nsim = 500, cl = cl))
#which diets differ from each other with regard to chick weight?
em_obj <- emmeans(fit, pairwise ~ Diet)
em_obj
#in which diets is there significant evidence of change in weight over time?
emt_obj <- emtrends(fit, ~Diet, var='c_time')
emt_obj
#Which diets differ from each other significantly in the change in weight over time?
pairs(emt_obj)
#make subset with re-centered time var
dfn <- filter(df, Diet==1|Diet==3) %>%
mutate(rc_time= Time - mean(Time))
#fit model
fit_ss13 <- mixed(weight ~ Diet*rc_time + (1 + rc_time|Chick), type=3, method='PB', args_test = list(nsim = 500, cl = cl), data=dfn)
summary(fit_ss13)
fit_ss13$anova_table
diet1 <- filter(df, Diet=='1') %>%
mutate(rc_time1=Time-mean(Time)) %>%
mixed(weight ~ rc_time1 + (1+rc_time1|Chick), type=3, method='PB', args_test = list(nsim = 500, cl = cl), data=.)
diet3 <- filter(df, Diet=='3') %>%
mutate(rc_time1=Time-mean(Time)) %>%
mixed(weight ~ rc_time1 + (1+rc_time1|Chick), type=3, method='PB', args_test = list(nsim = 500, cl = cl), data=.)
stopCluster(cl)
summary(fit_m)
summary(fit)$coefficients[8,2]
summary(fit)$coefficients
summary(fit)$coefficients[8,4]
knitr::opts_chunk$set(echo = T, warning=FALSE, message=FALSE)
library(knitr)
rmarkdown::render_site
#function for returning _p_ value
report_p <- function(p) {
ifelse(p <= 0.001, paste('<', '.001'), ifelse(p <= 0.01, paste('<', '.01'), ifelse(p <= 0.05, paste('<', '.05'), paste('=', format(p, digits=3)))))
}
#load libraries
library(lme4)
library(pbkrtest)
library(tidyverse)
library(parallel)
library(car)
library(afex)
#set contrasts
options(contrasts=c("contr.sum", "contr.poly"))
options(digits=3)
#import data
setwd('~/Documents/workspace/research_master/block_3/mixed_models/week_3/hw_3/')
df <- read.csv('CherryPit_large_N30Gender.csv')
#center trial
df$c_trial <- df$num_trial - mean(df$num_trial)
#fit model
fit <- lmer(distance ~ gender * c_trial + (1 + c_trial|pid) , data=df)
##First the gender main effect:
#fit full model
fit <- lmer(distance ~ gender + c_trial + (1 + c_trial|pid) , data=df)
#fit null model
fit_null <- lmer(distance ~ c_trial + (1 + c_trial|pid), data=df)
#Compute type 2 tests with anova
main_gender <- anova(fit_null, fit)
#store some values for reporting
ch_df <- main_gender$`Chi Df`[2]
ch_p <- main_gender$`Pr(>Chisq)`[2]
#Compute type 2 tests with KRmodcomp
main_gender_kr <- KRmodcomp(fit, fit_null)
#store some values for reporting
f_p <- main_gender_kr$test$p.value[1]
#Compute type 2 tests with PBmodcomp
cl <- makeCluster(4)
main_gender_pb <- PBmodcomp(fit, fit_null, cl=cl)
stopCluster(cl)
kb_p <- main_gender_pb$test[2,3]
##Now c_trial main effect:
#fit full model
fit <- lmer(distance ~ gender + c_trial + (1 + c_trial|pid) , data=df)
#fit null model
fit_null <- lmer(distance ~ gender + (1 + c_trial|pid) , data=df)
#Compute type 2 tests with anova
main_trial <- anova(fit_null, fit)
ch_df <- main_trial$`Chi Df`[2]
ch_p <- main_trial$`Pr(>Chisq)`[2]
#Compute type 2 tests with KRmodcomp
main_trial_kr <- KRmodcomp(fit, fit_null)
#store some values for reporting
f_p <- main_trial_kr$test$p.value[1]
#Compute type 2 tests with PBmodcomp
main_trial_pb <- PBmodcomp(fit, fit_null)
kb_p <- main_trial_pb$test[2,3]
#fit full model
fit <- lmer(distance ~ gender * c_trial + (1 + c_trial|pid) , data=df)
#fit null model
fit_null <- lmer(distance ~ gender + c_trial + (1 + c_trial|pid) , data=df)
#Compute type 2 tests with anova
interaction_test <- anova(fit_null, fit)
ch_df <- interaction_test$`Chi Df`[2]
ch_p <- interaction_test$`Pr(>Chisq)`[2]
#Compute type 2 tests with KRmodcomp
interaction_kr <- KRmodcomp(fit, fit_null)
#store some values for reporting
f_p <- interaction_kr$test$p.value[1]
#Compute type 2 tests with PBmodcomp
interaction_pb <- PBmodcomp(fit, fit_null)
kb_p <- interaction_pb$test[2,3]
##First the gender main effect:
#fit full model
fit <- lmer(distance ~ gender * c_trial + (1 + c_trial|pid) , data=df)
#fit null model
fit_null <- lmer(distance ~ c_trial + gender:c_trial + (1 + c_trial|pid), data=df)
#Compute type 2 tests
ok <- anova(fit_null, fit)
##Now c_trial main effect:
#fit full model
fit <- lmer(distance ~ gender * c_trial + (1 + c_trial|pid) , data=df)
#fit null model
fit_null <- lmer(distance ~ gender + gender:c_trial + (1 + c_trial|pid) , data=df)
#Compute type 2 tests with anova
not_ok <- anova(fit_null, fit)
##Now the interaction:
#fit full model
fit <- lmer(distance ~ gender * c_trial + (1 + c_trial|pid) , data=df)
#fit null model
fit_null <- lmer(distance ~ gender + c_trial + (1 + c_trial|pid) , data=df)
#Compute type 2 tests with anova
ok2 <- anova(fit_null, fit)
not_ok
type3 <- Anova(fit, type=3, test='F')
type3
cl <- makeCluster(4)
fit_lrt <- mixed(distance ~ gender*c_trial + (1 + c_trial|pid), data=df, type=3, method='LRT', cl=cl)
stopCluster(cl)
fit_lrt$anova_table
cl <- makeCluster(4)
fit_kr <- mixed(distance ~ gender*c_trial + (1 + c_trial|pid), data=df, type=3, method='KR', test_intercept=T, cl=cl)
stopCluster(cl)
fit_kr$anova_table
cl <- makeCluster(4)
fit_pb <- mixed(distance ~ gender*c_trial + (1 + c_trial|pid), data=df, type=3, method='PB', cl=cl)
stopCluster(cl)
fit_pb$anova_table
politeness  <- read.csv('http://www.bodowinter.com/tutorial/politeness_data.csv')
head(politeness)
#count na and show the id
sum(is.na(politeness$frequency))
which(is.na(politeness$frequency))
#boxplots attitide*gender
qplot(attitude, frequency, data=politeness, geom='boxplot', fill=gender)
#nullmodel
pl.null <- lmer(frequency ~gender + (1|subject) + (1|scenario), data=politeness, REML=F)
#fullmodel
pl.model <- lmer(frequency ~ attitude + gender + (1|subject) + (1|scenario), data=politeness, REML=F)
#likelihood ratio test with anova
anova(pl.null, pl.model)
#Take a look at coefs
coef(pl.model)
#fit model with both ri and rs
pl.model <- lmer(frequency ~attitude + gender + (1+attitude|subject) + (1+attitude|scenario), data=politeness, REML=F)
#again look at the coefs
coef(pl.model)
#new null model
pl.null <- lmer(frequency ~ gender + (1+attitude|subject) + (1+attitude|scenario), data=politeness, REML=FALSE)
#The model needs to have the same random effects structure. Here is the anova:
anova(pl.null, pl.model)
#check influental
all.res=numeric(nrow(politeness))
for (i in 1:nrow(politeness)){
myfullmodel=lmer(frequency ~ gender + attitude + (1+attitude|subject), politeness[-i,])
all.res[i]=fixef(myfullmodel)[2]
}
all.res
summary(fit_pb)$coefficients
summary(fit_pb)$coefficients
summary(fit_kr)$coefficients
summary(fit_lrt)$coefficients
fit_kr$anova_table
fit_lrt$anova_table
fit_pb$anova_table
knitr::opts_chunk$set(echo = T, warning=FALSE, message=FALSE)
library(knitr)
rmarkdown::render_site
diet1 <- filter(df, Diet=='1') %>%
mutate(rc_time1=Time-mean(Time)) %>%
mixed(weight ~ rc_time1 + (1+rc_time1|Chick), type=3, method='PB', args_test = list(nsim = 500, cl = cl), data=.)
knitr::opts_chunk$set(echo = T, warning=FALSE, message=FALSE)
library(knitr)
rmarkdown::render_site
#function for returning p value
report_p <- function(p) {
ifelse(p <= 0.001, paste('<', '.001'),  paste('=', p))
}
#reporting function
print_estimates <- function(model, name, complete=TRUE, method='PB') {
df_sig <- ifelse(method=='PB', '_PBtest_', ifelse(method=='KR', '_F_', '$\\chi^2$'))
ifelse(method=='PB', ifelse(!complete, glue::glue('Estimate = {format(summary(model)$coefficients[name,1], digits=ifelse(summary(model)$coefficients[name,1]<1, 2, ifelse(summary(model)$coefficients[name,1]<10, 3, ifelse(summary(model)$coefficients[name,1]<100, 4, 5))))}({format(summary(model)$coefficients[name,2], digits=ifelse(summary(model)$coefficients[name,2]<1, 2, ifelse(summary(model)$coefficients[name,2]<10, 3, ifelse(summary(model)$coefficients[name,2]<100, 4, 5))))}), '), glue::glue('Estimate = {format(summary(model)$coefficients[name,1], digits=ifelse(summary(model)$coefficients[name,1]<1, 2, ifelse(summary(model)$coefficients[name,1]<10, 3, ifelse(summary(model)$coefficients[name,1]<100, 4, 5))))}({format(summary(model)$coefficients[name,2], digits=ifelse(summary(model)$coefficients[name,2]<1, 2, ifelse(summary(model)$coefficients[name,2]<10, 3, ifelse(summary(model)$coefficients[name,2]<100, 4, 5))))}), {df_sig} = {format(model$anova_table[name,1], digits=ifelse(model$anova_table[name,1]<1, 2, ifelse(model$anova_table[name,1]<10, 3, ifelse(model$anova_table[name,1]<100, 4, 5))))}, _p_ {report_p(model$anova_table[name,4])})')), ifelse(method=='KR', ifelse(!complete, glue::glue('Estimate = {format(summary(model)$coefficients[name,1], digits=ifelse(summary(model)$coefficients[name,1]<1, 2, ifelse(summary(model)$coefficients[name,1]<10, 3, ifelse(summary(model)$coefficients[name,1]<100, 4, 5))))}({format(summary(model)$coefficients[name,2], digits=ifelse(summary(model)$coefficients[name,2]<1, 2, ifelse(summary(model)$coefficients[name,2]<10, 3, ifelse(summary(model)$coefficients[name,2]<100, 4, 5))))}), '), glue::glue('Estimate = {format(summary(model)$coefficients[name,1], digits=ifelse(summary(model)$coefficients[name,1]<1, 2, ifelse(summary(model)$coefficients[name,1]<10, 3, ifelse(summary(model)$coefficients[name,1]<100, 4, 5))))}({format(summary(model)$coefficients[name,2], digits=ifelse(summary(model)$coefficients[name,2]<1, 2, ifelse(summary(model)$coefficients[name,2]<10, 3, ifelse(summary(model)$coefficients[name,2]<100, 4, 5))))}), {df_sig}({model$anova_table[name,1]},{format(model$anova_table[name,2], digits=ifelse(model$anova_table[name,2]<1, 2, ifelse(model$anova_table[name,2]<10, 3, ifelse(model$anova_table[name,2]<100, 4, 5))))}) = {format(model$anova_table[name,3], digits=ifelse(model$anova_table[name,3]<1, 2, ifelse(model$anova_table[name,3]<10, 3, ifelse(model$anova_table[name,3]<100, 4, 5))))}, _p_ {report_p(model$anova_table[name,4])})')), ifelse(!complete, glue::glue('Estimate = {format(summary(model)$coefficients[name,1], digits=ifelse(summary(model)$coefficients[name,1]<1, 2, ifelse(summary(model)$coefficients[name,1]<10, 3, ifelse(summary(model)$coefficients[name,1]<100, 4, 5))))}({format(summary(model)$coefficients[name,2], digits=ifelse(summary(model)$coefficients[name,2]<1, 2, ifelse(summary(model)$coefficients[name,2]<10, 3, ifelse(summary(model)$coefficients[name,2]<100, 4, 5))))}), '), glue::glue('Estimate = {format(summary(model)$coefficients[name,1], digits=ifelse(summary(model)$coefficients[name,1]<1, 2, ifelse(summary(model)$coefficients[name,1]<10, 3, ifelse(summary(model)$coefficients[name,1]<100, 4, 5))))}({format(summary(model)$coefficients[name,2], digits=ifelse(summary(model)$coefficients[name,2]<1, 2, ifelse(summary(model)$coefficients[name,2]<10, 3, ifelse(summary(model)$coefficients[name,2]<100, 4, 5))))}), {df_sig}({format(model$anova_table[name,3], digits=ifelse(model$anova_table[name,3]<1, 2, ifelse(model$anova_table[name,3]<10, 3, ifelse(model$anova_table[name,3]<100, 4, 5))))}) = {format(model$anova_table[name,2], digits=ifelse(model$anova_table[name,2]<1, 2, ifelse(model$anova_table[name,2]<10, 3, ifelse(model$anova_table[name,2]<100, 4, 5))))}, _p_ {report_p(model$anova_table[name,4])})'))))
}
#2
print_comp <- function(model, name, method='PB') {
df_sig <- ifelse(method=='PB', '_PBtest_', ifelse(method=='KR', '_F_', '$\\chi^2$'))
ifelse(method=='PB', glue::glue('{df_sig} = {format(model$anova_table[name,1], digits=ifelse(model$anova_table[name,1]<1, 2, ifelse(model$anova_table[name,1]<10, 3, ifelse(model$anova_table[name,1]<100, 4, 5))))}, _p_ {report_p(model$anova_table[name,4])})'), ifelse(method=='KR',  glue::glue('{df_sig}({model$anova_table[name,1]},{format(model$anova_table[name,2], digits=ifelse(model$anova_table[name,2]<1, 2, ifelse(model$anova_table[name,2]<10, 3, ifelse(model$anova_table[name,2]<100, 4, 5))))}) = {format(model$anova_table[name,3], digits=ifelse(model$anova_table[name,3]<1, 2, ifelse(model$anova_table[name,3]<10, 3, ifelse(model$anova_table[name,3]<100, 4, 5))))}, _p_ {report_p(model$anova_table[name,4])})'), glue::glue('{df_sig}({format(model$anova_table[name,3], digits=ifelse(model$anova_table[name,3]<1, 2, ifelse(model$anova_table[name,3]<10, 3, ifelse(model$anova_table[name,3]<100, 4, 5))))}) = {format(model$anova_table[name,2], digits=ifelse(model$anova_table[name,2]<1, 2, ifelse(model$anova_table[name,2]<10, 3, ifelse(model$anova_table[name,2]<100, 4, 5))))}, _p_ {report_p(model$anova_table[name,4])})')))
}
#options
options(digits=3)
#contrasts
options(contrasts=c("contr.sum", "contr.poly"))
#load libraries
library(lme4)
library(tidyverse)
library(afex)
library(parallel)
library(emmeans)
#rename df
df <- ChickWeight
#center time
df$c_time <- df$Time-mean(df$Time)
#levels(df$Diet) <- paste('diet', unique(df$Diet), sep='_')
fixed_fit <- lm(weight ~ Time * Diet, data=df)
with(df, table(Diet, Chick))
with(df, table(Time, Chick))
with(df, table(Time, Chick, Diet))
cl <- makeCluster(4)
fit <- lmer(weight ~ Diet*c_time + (1 + c_time|Chick), data=df)
summary(fit)
#densityplot residuals
df$sresid <- resid(fit, scale=T)
qplot(sresid, geom='density', data=df)
##qqplot residuals
library(car)
qqPlot(df$sresid)
#proportions
mean(abs(df$sresid>=2))
mean(abs(df$sresid>=2.5))
mean(abs(df$sresid>=3))
#homoscedasticity
df$fitted <- fitted(fit)
qplot(fitted, sresid, geom=c('point', 'smooth'), se=F, data=df)
ggplot(df, aes(c_time, weight)) +
geom_jitter(alpha=0.5) +
geom_smooth(se=F, color='red') +
geom_smooth(method='lm', se=F)
cl <- makeCluster(4)
fit_m <- mixed(weight ~ Diet*c_time + (1 + c_time|Chick), data=df,type=3, method='PB', args_test = list(nsim = 500, cl = cl))
#which diets differ from each other with regard to chick weight?
em_obj <- emmeans(fit, pairwise ~ Diet)
em_obj
#in which diets is there significant evidence of change in weight over time?
emt_obj <- emtrends(fit, ~Diet, var='c_time')
emt_obj
#Which diets differ from each other significantly in the change in weight over time?
pairs(emt_obj)
#make subset with re-centered time var
dfn <- filter(df, Diet==1|Diet==3) %>%
mutate(rc_time= Time - mean(Time))
#fit model
fit_ss13 <- mixed(weight ~ Diet*rc_time + (1 + rc_time|Chick), type=3, method='PB', args_test = list(nsim = 500, cl = cl), data=dfn)
summary(fit_ss13)
fit_ss13$anova_table
diet1 <- filter(df, Diet=='1') %>%
mutate(rc_time1=Time-mean(Time)) %>%
mixed(weight ~ rc_time1 + (1+rc_time1|Chick), type=3, method='PB', args_test = list(nsim = 500, cl = cl), data=.)
diet3 <- filter(df, Diet=='3') %>%
mutate(rc_time1=Time-mean(Time)) %>%
mixed(weight ~ rc_time1 + (1+rc_time1|Chick), type=3, method='PB', args_test = list(nsim = 500, cl = cl), data=.)
stopCluster(cl)
print_estimates(fit_m, 'c_time')
print_comp(fit_m, 'Diet')
print_estimates(fit_m, 'Diet3:c_time')
summary(fit_m)$coefficients
print_estimates(fit_m, 'Diet3:c_time', complete=F)
print_estimates(fit_ss13, 'Diet:c_time')
summary(fit_ss13)$coefficients
print_estimates(fit_ss13, 'Diet1:rc_time')
print_estimates(fit_ss13, 'Diet1:rc_time', complete = F)
print_comp(fit_ss13, 'Diet1:rc_time')
print_comp(fit_ss13, 'Diet1:rc_time')
summary(fit_ss13)$coefficients
fit_ss13$anova_table
print_comp(fit_ss13, 'Diet:rc_time')
print_estimates(fit_ss13, 'Diet1:rc_time', complete = F)
getwd()
setwd(research_master)
setwd('website/mysite/main/templates/r/')
source('~/Documents/workspace/website/mysite/main/templates/r/')
source('~/Documents/workspace/website/mysite/main/templates/r/reporting.R')
print_es
#load libraries
library(lme4)
#load libraries
library(lme4)
library(tidyverse)
library(afex)
library(parallel)
library(emmeans)
#function for returning p value
report_p <- function(p) {
ifelse(p <= 0.001, paste('<', '.001'),  paste('=', p))
}
#contrasts
options(contrasts=c("contr.sum", "contr.poly"))
#rename ChickWeight dataframe, check structure
df <- ChickWeight
dft <- df
contrasts(dft$Diet) <- contr.treatment
str(df)
##mean, sd and n
#overall
summarise(df, mean=mean(weight), sd=sd(weight), n=n())
#by Diet
group_by(df, Diet) %>%
summarise(mean=mean(weight), sd=sd(weight), n=n())
#by Day
group_by(df, Time) %>%
summarise(mean=mean(weight), sd=sd(weight), n=n())
(102.6455+122.6167+142.9500+135.2627)/4
#center time
df$c_time <- df$Time-mean(df$Time)
#plot
qplot(c_time, weight, color=Diet, geom=c('smooth', 'jitter'), method='lm', se=F, data=df)
#fit model
fit <- lmer(weight ~ Diet*c_time + (1 + c_time|Chick), data=df)
head(coef(fit)$Chick)
rownames_to_column(coef(fit)$Chick, 'Chick') %>%
select(Chick, r_intercept=`(Intercept)`, r_slope=c_time) %>%
right_join(df, by='Chick')  %>%
mutate(Chick=reorder(Chick, r_intercept)) %>%
ggplot(aes(c_time, weight, color=Diet)) +
geom_point() +
geom_abline(aes(intercept=r_intercept, slope=r_slope)) +
facet_wrap(~Chick)
#fit model
fit <- lmer(weight ~ Diet*c_time + (1+c_time|Chick), data=df)
summary(fit)
#densityplot residuals
df$sresid <- resid(fit, scale=T)
qplot(sresid, geom='density', data=df)
##qqplot residuals
library(car)
qqPlot(df$sresid)
#proportions
mean(abs(df$sresid>=2))
mean(abs(df$sresid>=2.5))
mean(abs(df$sresid>=3))
#homoscedasticity
df$fitted <- fitted(fit)
qplot(fitted, sresid, geom=c('point', 'smooth'), se=F, data=df)
ggplot(df, aes(c_time, weight)) +
geom_jitter(alpha=0.5) +
geom_smooth(se=F, color='red') +
geom_smooth(method='lm', se=F)
# #treatment contrasts
# fitt <- lmer(weight ~ Diet*c_time + (1+c_time|Chick), data=dft)
# summary(fitt)
# ### Play with means
# filter(df, Diet==1) %>%
#   summarise(mean=mean(weight))
# fi <- lm(weight ~ Diet*c_time, df)
# summary(fi)
#dtermine p values with bootstrapped lrt
cl <- makeCluster(4)
fit_m <- mixed(weight ~ Diet*c_time + (1 + c_time|Chick), data=df,type=3, method='PB', cl=cl)
stopCluster(cl)
#posthoc
emobj <- emmeans(fit, pairwise ~ Diet)
emobj
print_estimates <- function(model, name, complete=TRUE, method='PB') {
df_sig <- ifelse(method=='PB', '_PBtest_', ifelse(method=='KR', '_F_', '$\\chi^2$'))
ifelse(method=='PB', ifelse(!complete, glue::glue('Estimate = {format(summary(model)$coefficients[name,1], digits=ifelse(summary(model)$coefficients[name,1]<1, 2, ifelse(summary(model)$coefficients[name,1]<10, 3, ifelse(summary(model)$coefficients[name,1]<100, 4, 5))))}({format(summary(model)$coefficients[name,2], digits=ifelse(summary(model)$coefficients[name,2]<1, 2, ifelse(summary(model)$coefficients[name,2]<10, 3, ifelse(summary(model)$coefficients[name,2]<100, 4, 5))))}), '), glue::glue('Estimate = {format(summary(model)$coefficients[name,1], digits=ifelse(summary(model)$coefficients[name,1]<1, 2, ifelse(summary(model)$coefficients[name,1]<10, 3, ifelse(summary(model)$coefficients[name,1]<100, 4, 5))))}({format(summary(model)$coefficients[name,2], digits=ifelse(summary(model)$coefficients[name,2]<1, 2, ifelse(summary(model)$coefficients[name,2]<10, 3, ifelse(summary(model)$coefficients[name,2]<100, 4, 5))))}), {df_sig} = {format(model$anova_table[name,1], digits=ifelse(model$anova_table[name,1]<1, 2, ifelse(model$anova_table[name,1]<10, 3, ifelse(model$anova_table[name,1]<100, 4, 5))))}, _p_ {report_p(model$anova_table[name,4])})')), ifelse(method=='KR', ifelse(!complete, glue::glue('Estimate = {format(summary(model)$coefficients[name,1], digits=ifelse(summary(model)$coefficients[name,1]<1, 2, ifelse(summary(model)$coefficients[name,1]<10, 3, ifelse(summary(model)$coefficients[name,1]<100, 4, 5))))}({format(summary(model)$coefficients[name,2], digits=ifelse(summary(model)$coefficients[name,2]<1, 2, ifelse(summary(model)$coefficients[name,2]<10, 3, ifelse(summary(model)$coefficients[name,2]<100, 4, 5))))}), '), glue::glue('Estimate = {format(summary(model)$coefficients[name,1], digits=ifelse(summary(model)$coefficients[name,1]<1, 2, ifelse(summary(model)$coefficients[name,1]<10, 3, ifelse(summary(model)$coefficients[name,1]<100, 4, 5))))}({format(summary(model)$coefficients[name,2], digits=ifelse(summary(model)$coefficients[name,2]<1, 2, ifelse(summary(model)$coefficients[name,2]<10, 3, ifelse(summary(model)$coefficients[name,2]<100, 4, 5))))}), {df_sig}({model$anova_table[name,1]},{format(model$anova_table[name,2], digits=ifelse(model$anova_table[name,2]<1, 2, ifelse(model$anova_table[name,2]<10, 3, ifelse(model$anova_table[name,2]<100, 4, 5))))}) = {format(model$anova_table[name,3], digits=ifelse(model$anova_table[name,3]<1, 2, ifelse(model$anova_table[name,3]<10, 3, ifelse(model$anova_table[name,3]<100, 4, 5))))}, _p_ {report_p(model$anova_table[name,4])})')), ifelse(!complete, glue::glue('Estimate = {format(summary(model)$coefficients[name,1], digits=ifelse(summary(model)$coefficients[name,1]<1, 2, ifelse(summary(model)$coefficients[name,1]<10, 3, ifelse(summary(model)$coefficients[name,1]<100, 4, 5))))}({format(summary(model)$coefficients[name,2], digits=ifelse(summary(model)$coefficients[name,2]<1, 2, ifelse(summary(model)$coefficients[name,2]<10, 3, ifelse(summary(model)$coefficients[name,2]<100, 4, 5))))}), '), glue::glue('Estimate = {format(summary(model)$coefficients[name,1], digits=ifelse(summary(model)$coefficients[name,1]<1, 2, ifelse(summary(model)$coefficients[name,1]<10, 3, ifelse(summary(model)$coefficients[name,1]<100, 4, 5))))}({format(summary(model)$coefficients[name,2], digits=ifelse(summary(model)$coefficients[name,2]<1, 2, ifelse(summary(model)$coefficients[name,2]<10, 3, ifelse(summary(model)$coefficients[name,2]<100, 4, 5))))}), {df_sig}({format(model$anova_table[name,3], digits=ifelse(model$anova_table[name,3]<1, 2, ifelse(model$anova_table[name,3]<10, 3, ifelse(model$anova_table[name,3]<100, 4, 5))))}) = {format(model$anova_table[name,2], digits=ifelse(model$anova_table[name,2]<1, 2, ifelse(model$anova_table[name,2]<10, 3, ifelse(model$anova_table[name,2]<100, 4, 5))))}, _p_ {report_p(model$anova_table[name,4])})'))))
}
cl <- makeCluster(4)
fit_kr <- mixed(weight ~ Diet*c_time + (1 + c_time|Chick), data=df,type=3, method='KR', cl=cl)
stopCluster(cl)
cl <- makeCluster(4)
fit_lrt <- mixed(weight ~ Diet*c_time + (1 + c_time|Chick), data=df,type=3, method='LRT', cl=cl)
stopCluster(cl)
cl <- makeCluster(4)
fit_pb <- mixed(weight ~ Diet*c_time + (1 + c_time|Chick), data=df,type=3, method='PB', cl=cl)
stopCluster(cl)
print_estimates(fit_kr, 'c_time', method='KR')
print_estimates(fit_pb, 'c_time', method='PB')
print_estimates(fit_lrt, 'c_time', method='LRT')
fit_kr$anova_table
summary(fit_pb)$coefficients
#make subset with re-centered time var
dfn <- filter(df, Diet==1|Diet==3) %>%
mutate(rc_time= Time - mean(Time))
#fit model
fit_ss13 <- mixed(weight ~ Diet*rc_time + (1 + rc_time|Chick), type=3, method='PB', args_test = list(nsim = 500, cl = cl), data=dfn)
summary(fit_ss13)
fit_ss13$anova_table
knitr::opts_chunk$set(echo = T, warning=FALSE, message=FALSE)
library(knitr)
rmarkdown::render_site
fit_kr
fit_m
mean(df$weight)
fit_m
summary(fit_m)
View(dfn)
